[
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nPerguntas pertinentes sobre Linguagem de Programação (LiP) na ECT:\n\nPor que é tão importante?\nPor que 90h?\nQual a relação com o curso de Bacharelado em Ciências e Tecnologia?"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\nO curso de Linguagem de Programação está relacionado com várias competências e habilidades desejáveis em profissionais da engenharia."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nCapacidade de identificar, avaliar e resolver problemas, enfrentar desafios e responder a novas demandas da sociedade contemporânea\nCapacidade de comunicação e argumentação em suas múltiplas formas\nCapacidade de atuar em áreas de fronteira e interfaces de diferentes disciplinas e campos de saber"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nAtitude investigativa, de prospecção, de permanente busca e produção do conhecimento\nAtitude ética nas esferas profissional, acadêmica e das relações interpessoais"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nFonte: Projeto Pedagógico do Curso de Bacharelado em Ciências e Tecnologia\nConsulte o Projeto Pedagógico do seu curso de engenharia e verifique quais competências e habilidades você acha que estão relacionadas com o curso de LiP"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\nComo é possível ver, o curso de Linguagem de Programação (LiP) é bem completo quanto ao seu envolvimento com as competências e habilidades desejadas de um bacharel em CeT."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#apresentação",
    "href": "slides/01-intro/01-intro.html#apresentação",
    "title": "Introdução",
    "section": "Apresentação",
    "text": "Apresentação\n\nProf. Bruno Silva\nAtendimento:\n\nVia email: bruno.silva@ect.ufrn.br\nVia Discord\nHorário para a turma: terças e quintas, das 9:30 às 10:30\n\nÁreas de interesse:\n\nProcessamento de imagens e visão computacional\nInteligência artificial e robótica"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "title": "Introdução",
    "section": "Sobre a Disciplina",
    "text": "Sobre a Disciplina\n\nAulas teóricas: terças e quintas, de 10:50 às 12:30, Auditório F da ECT\nCarga horária: 90 horas (30h de laboratório)\nMetodologia:\n\nAulas expositivas com slides digitais\nTópicos de aula seguidos por exercícios\nAtividades práticas em laboratório"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#laboratórios",
    "href": "slides/01-intro/01-intro.html#laboratórios",
    "title": "Introdução",
    "section": "Laboratórios",
    "text": "Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#avaliações",
    "href": "slides/01-intro/01-intro.html#avaliações",
    "title": "Introdução",
    "section": "Avaliações",
    "text": "Avaliações\n\nPráticas semanais no laboratório (30%)\nProva prática em cada unidade (70%)\nPresenças serão registradas por chamada em todas as aulas"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "title": "Introdução",
    "section": "Sobre a Disciplina: Observação Importante",
    "text": "Sobre a Disciplina: Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma",
    "href": "slides/01-intro/01-intro.html#cronograma",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 1"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-1",
    "href": "slides/01-intro/01-intro.html#cronograma-1",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 2"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-2",
    "href": "slides/01-intro/01-intro.html#cronograma-2",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 3"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#livros-utilizados",
    "href": "slides/01-intro/01-intro.html#livros-utilizados",
    "title": "Introdução",
    "section": "Livros Utilizados",
    "text": "Livros Utilizados"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso assistir aula em uma subturma de laboratório que não seja a minha? Neste semestre estamos oferecendo esta flexibilidade. Fale com o professor responsável pelo seu laboratório.\nEsta semana tem aula de laboratório? Na disciplina de LiP, os laboratórios são semanais. Caso não haja nenhum aviso (no SIGAA), a resposta provavelmente é sim. Na dúvida, confira o plano de aulas no SIGAA."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nMeu programa enviado no Multiprova/Sistema LoP deu 100% correto. Por que a minha nota não foi 10? O seu programa ter 100% de acerto não implica no fato de que você implementou a questão como solicitada.\nAcho curto o tempo para entrega das questões de lab. Por que não estender este prazo? As questões são elaboradas para serem entregues em um determinado prazo. O fato de você não conseguir entregá-las significa que o seu nível de desenvoltura com a disciplina está abaixo do esperado."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso utilizar o recurso XYZ (p. ex. vetores) em uma atividade, mesmo que ele ainda não tenha sido apresentado em sala de aula? E quanto a recursos não passados pelo professor? Não. Todas as atividades avaliativas são elaboradas de forma que o aluno seja avaliado considerando o conteúdo que a ele foi passado até o momento da atividade."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que não ouve o professor\n\nParadoxo: se o aluno não ouve o professor, ele também não irá ouvir esta afirmação e portanto, o problema não tem solução\nPor exemplo: quantos daqui ouviram os argumentos da importância de LiP?\n\nAluno que não estudou o suficiente para uma atividade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que acha que está aprendendo, mas não está\n\nPor exemplo, aluno que costuma fazer trabalhos em grupo ou acha que programação se aprende vendo alguém praticar\n\nAluno que quer burlar o sistema de avaliação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#demais-perguntas",
    "href": "slides/01-intro/01-intro.html#demais-perguntas",
    "title": "Introdução",
    "section": "Demais Perguntas",
    "text": "Demais Perguntas\nSintam-se à vontade para fazer qualquer pergunta sobre a disciplina ou sobre o professor"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#dúvidas",
    "href": "slides/01-intro/01-intro.html#dúvidas",
    "title": "Introdução",
    "section": "Dúvidas",
    "text": "Dúvidas\n\nMensagem via Discord\nEmail: bruno.silva@ect.ufrn.br\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "href": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "title": "Introdução",
    "section": "Horários dos Laboratórios",
    "text": "Horários dos Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)\n\nAs atividades práticas serão realizadas no Multiprova"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#observação-importante",
    "href": "slides/01-intro/01-intro.html#observação-importante",
    "title": "Introdução",
    "section": "Observação Importante",
    "text": "Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#por-que-poo",
    "href": "slides/01-intro/01-intro.html#por-que-poo",
    "title": "Introdução",
    "section": "Por que POO?",
    "text": "Por que POO?\n\nQual a importância de POO para um desenvolvedor?\nEla constitui realmente uma ferramenta importante?\n\n\nSão estas as duas perguntas que cada um de vocês deverá responder ao final do semestre"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#objetivos",
    "href": "slides/01-intro/01-intro.html#objetivos",
    "title": "Introdução",
    "section": "Objetivos",
    "text": "Objetivos\nO objetivo do curso é fazer com que os estudantes sejam capazes de:\n\nIdentificar os conceitos fundamentais do paradigma de programação orientado a objetos (POO)\nUtilizar apropriadamente as técnicas de modelagem e programação orientadas a objeto\nDesenvolver aplicações utilizando o paradigma de POO"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas",
    "href": "slides/01-intro/01-intro.html#ferramentas",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\nLinguagem\n\nÊnfase da disciplina: teoria de POO\nEntretanto: é necessário escolher uma linguagem para colocar os conceitos em prática\nLinguagem escolhida:\n\n\nPython"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-1",
    "href": "slides/01-intro/01-intro.html#ferramentas-1",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\nLinguagem Python\n\nLinguagem multi paradigmas\nSuporta o paradigma de POO\nLinguagem de fácil aprendizado"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-2",
    "href": "slides/01-intro/01-intro.html#ferramentas-2",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\n\nPython 3.X\nIDES:\n\nMais simples: Sublime/ Atom\nMais completas: Visual Studio Code/ PyCharm\n\nJupyter Notebooks"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ementa-da-disciplina",
    "href": "slides/01-intro/01-intro.html#ementa-da-disciplina",
    "title": "Introdução",
    "section": "Ementa da Disciplina",
    "text": "Ementa da Disciplina\nPilares fundamentais:\n\nAbstração\nEncapsulamento\nHerança\nPolimorfismo\n\nConceitos de Programação:\n\nErros e exceções\nEstruturas de dados (listas, dicionários, etc)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#avaliação",
    "href": "slides/01-intro/01-intro.html#avaliação",
    "title": "Introdução",
    "section": "Avaliação",
    "text": "Avaliação\n\nUnidades I e II:\n\nTarefas (40%)\nProva (60%)\n\nUnidade III:\n\nTarefas (20%)\nProjeto (80%)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nLivros online:\n\nHow to Think Like a Computer Scientist\nObject-Oriented Programming in Python\nA Byte of Python\n\nTutoriais:\n\nDocumentação de Python\nReal Python"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico-1",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico-1",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nLivros:\n\nLearning Python\nPython 3 Object Oriented Programming"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#comparação-com-lip",
    "href": "slides/01-intro/01-intro.html#comparação-com-lip",
    "title": "Introdução",
    "section": "Comparação com LIP",
    "text": "Comparação com LIP\n\nAssume-se que você domina os conceitos fundamentais de LiP (variáveis, estruturas de controle e funções).\nPOO envolve consideravelmente mais teoria do que LiP\nPOO exige também mais proatividade por parte do aluno"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sejam-bem-vindos",
    "href": "slides/01-intro/01-intro.html#sejam-bem-vindos",
    "title": "Introdução",
    "section": "Sejam bem-vindos!",
    "text": "Sejam bem-vindos!\nTarefa - instalar a distribuição Anaconda:\n\nWindows\nLinux\n\nEm seguida, verifique se o terminal Python está funcionando no seu computador"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#linguagem-de-programação",
    "href": "slides/01-intro/X_01-intro.html#linguagem-de-programação",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nPerguntas pertinentes sobre Linguagem de Programação (LiP) na ECT:\n\nPor que é tão importante?\nPor que 90h?\nQual a relação com o curso de Bacharelado em Ciências e Tecnologia?"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#linguagem-de-programação-1",
    "href": "slides/01-intro/X_01-intro.html#linguagem-de-programação-1",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nO curso de Linguagem de Programação está relacionado com várias competências e habilidades desejáveis em profissionais da engenharia. Por exemplo:"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#linguagem-de-programação-2",
    "href": "slides/01-intro/X_01-intro.html#linguagem-de-programação-2",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nCapacidade de identificar, avaliar e resolver problemas, enfrentar desafios e responder a novas demandas da sociedade contemporânea\nCapacidade de comunicação e argumentação em suas múltiplas formas\nCapacidade de atuar em áreas de fronteira e interfaces de diferentes disciplinas e campos de saber"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#linguagem-de-programação-3",
    "href": "slides/01-intro/X_01-intro.html#linguagem-de-programação-3",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nAtitude investigativa, de prospecção, de permanente busca e produção do conhecimento\nAtitude ética nas esferas profissional, acadêmica e das relações interpessoais"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#linguagem-de-programação-4",
    "href": "slides/01-intro/X_01-intro.html#linguagem-de-programação-4",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nFonte: Projeto Pedagógico do Curso de Bacharelado em Ciências e Tecnologia\nConsulte o Projeto Pedagógico do seu curso de engenharia e verifique quais competências e habilidades você acha que estão relacionadas com o curso de LiP"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#apresentação",
    "href": "slides/01-intro/X_01-intro.html#apresentação",
    "title": "Introdução",
    "section": "Apresentação",
    "text": "Apresentação\n\nProf. Bruno Silva\nAtendimento:\n\nVia email: bruno.silva@ect.ufrn.br\nVia Discord\nHorário para a turma: terças e quintas, das 9:30 às 10:30\n\nÁreas de interesse:\n\nProcessamento de imagens e visão computacional\nInteligência artificial e robótica"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#sobre-a-disciplina",
    "href": "slides/01-intro/X_01-intro.html#sobre-a-disciplina",
    "title": "Introdução",
    "section": "Sobre a Disciplina",
    "text": "Sobre a Disciplina\n\nAulas teóricas: terças e quintas, de 10:50 às 12:30, Auditório F da ECT\nCarga horária: 90 horas (30h de laboratório)\nMetodologia:\n\nAulas expositivas com slides digitais\nTópicos de aula seguidos por exercícios\nAtividades práticas em laboratório"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#horários-dos-laboratórios",
    "href": "slides/01-intro/X_01-intro.html#horários-dos-laboratórios",
    "title": "Introdução",
    "section": "Horários dos Laboratórios",
    "text": "Horários dos Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)\n\nAs atividades práticas serão realizadas no Multiprova"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#avaliações",
    "href": "slides/01-intro/X_01-intro.html#avaliações",
    "title": "Introdução",
    "section": "Avaliações",
    "text": "Avaliações\n\nPráticas semanais no laboratório (30%)\nProva prática em cada unidade (70%)\nPresenças serão registradas por chamada em todas as aulas"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#observação-importante",
    "href": "slides/01-intro/X_01-intro.html#observação-importante",
    "title": "Introdução",
    "section": "Observação Importante",
    "text": "Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#cronograma",
    "href": "slides/01-intro/X_01-intro.html#cronograma",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 1"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#cronograma-1",
    "href": "slides/01-intro/X_01-intro.html#cronograma-1",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 2"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#cronograma-2",
    "href": "slides/01-intro/X_01-intro.html#cronograma-2",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 3"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#livros-utilizados",
    "href": "slides/01-intro/X_01-intro.html#livros-utilizados",
    "title": "Introdução",
    "section": "Livros Utilizados",
    "text": "Livros Utilizados"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#perguntas-frequentes",
    "href": "slides/01-intro/X_01-intro.html#perguntas-frequentes",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso assistir aula em uma subturma de laboratório que não seja a minha? Neste semestre estamos oferecendo esta flexibilidade. Fale com o professor responsável pelo seu laboratório.\nEsta semana tem aula de laboratório? Na disciplina de LiP, os laboratórios são semanais. Caso não haja nenhum aviso (no SIGAA), a resposta provavelmente é sim. Na dúvida, confira o plano de aulas no SIGAA."
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#perguntas-frequentes-1",
    "href": "slides/01-intro/X_01-intro.html#perguntas-frequentes-1",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nMeu programa enviado no Multiprova/Sistema LoP deu 100% correto. Por que a minha nota não foi 10? O seu programa ter 100% de acerto não implica no fato de que você implementou a questão como solicitada.\nAcho curto o tempo para entrega das questões de lab. Por que não estender este prazo? As questões são elaboradas para serem entregues em um determinado prazo. O fato de você não conseguir entregá-las significa que o seu nível de desenvoltura com a disciplina está abaixo do esperado."
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#perguntas-frequentes-2",
    "href": "slides/01-intro/X_01-intro.html#perguntas-frequentes-2",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso utilizar o recurso XYZ (p. ex. vetores) em uma atividade, mesmo que ele ainda não tenha sido apresentado em sala de aula? E quanto a recursos não passados pelo professor? Não. Todas as atividades avaliativas são elaboradas de forma que o aluno seja avaliado considerando o conteúdo que a ele foi passado até o momento da atividade."
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#experiências-passadas-em-lip",
    "href": "slides/01-intro/X_01-intro.html#experiências-passadas-em-lip",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que não ouve o professor\n\nParadoxo: se o aluno não ouve o professor, ele também não irá ouvir esta afirmação e portanto, o problema não tem solução\nPor exemplo: quantos daqui ouviram os argumentos da importância de LiP?\n\nAluno que não estudou o suficiente para uma atividade"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#experiências-passadas-em-lip-1",
    "href": "slides/01-intro/X_01-intro.html#experiências-passadas-em-lip-1",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que acha que está aprendendo, mas não está\n\nPor exemplo, aluno que costuma fazer trabalhos em grupo ou acha que programação se aprende vendo alguém praticar\n\nAluno que quer burlar o sistema de avaliação"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#demais-perguntas",
    "href": "slides/01-intro/X_01-intro.html#demais-perguntas",
    "title": "Introdução",
    "section": "Demais Perguntas",
    "text": "Demais Perguntas\nSintam-se à vontade para fazer qualquer pergunta sobre a disciplina ou sobre o professor"
  },
  {
    "objectID": "slides/01-intro/X_01-intro.html#dúvidas",
    "href": "slides/01-intro/X_01-intro.html#dúvidas",
    "title": "Introdução",
    "section": "Dúvidas",
    "text": "Dúvidas\n\nMensagem via Discord\nEmail: bruno.silva@ect.ufrn.br\n\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-3",
    "href": "slides/01-intro/01-intro.html#ferramentas-3",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\n\nAulas\n\nPrimeiras 2 aulas da semana: teoria\nÚltimas 2 aulas da semana: prática\n\nDiscord\n\nLaboratório virtual: alunos são encorajados a se reunirem em canais de áudio\nPerguntas podem ser feitas ao professor ou a todos da turma"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico-2",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico-2",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nCursos online:\n\nPython OOP : Four Pillars of OOP in Python 3 for Beginners\n\nApostilas:\n\nCaelum"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ementa-da-disciplina-1",
    "href": "slides/01-intro/01-intro.html#ementa-da-disciplina-1",
    "title": "Introdução",
    "section": "Ementa da Disciplina",
    "text": "Ementa da Disciplina\nTodas as aulas programadas estão cadastradas no SIGAA"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#objetivos",
    "href": "slides/02-python-basico/02-python-basico.html#objetivos",
    "title": "Python Básico",
    "section": "Objetivos",
    "text": "Objetivos\nO objetivo da aula é introduzir comandos básicos em Python:\n\nTerminal interativo de comandos\nVariáveis e tipos\nOperadores e expressões\nEntrada e saída\nControle de fluxo (if, while, for) —"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\n\nCriada no início dos anos 90 (Guido van Rossum)\nAplicações:\n\nLinguagem de script (auxiliar)\nAplicações das grandes indústrias (Google, Dropbox, Intel, Netflix, etc.)\nAplicações científicas (NASA, Robot Operating System, etc.)\nBibliotecas de IA: Deep learning (PyTorch, TensorFlow) —"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-1",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-1",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\nPor que Python?\n\nSimplicidade\nFacilidade de aprendizado e de correção de erros\nCódigo limpo\nCódigo multiplataforma (Linux/Mac/Windows)\nSuporta o paradigma de programação orientada a objetos"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-2",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-2",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\n\nÉ uma linguagem interpretada\nSuporta um terminal de comandos interativo\n\nQualquer comando da linguagem pode ser executado\n\nAgiliza a programação\nFacilita a depuração de erros"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-3",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-3",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\nInstalação (Windows e Linux):\n\nBaixar a distribuição Anaconda para Python\n\nWindows\nLinux\n\nInstalar a distribuição\nExecutar terminal Python"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#teste-vídeo",
    "href": "slides/02-python-basico/02-python-basico.html#teste-vídeo",
    "title": "Python Básico",
    "section": "Teste Vídeo",
    "text": "Teste Vídeo"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#terminal-de-comandos-interativo",
    "href": "slides/02-python-basico/02-python-basico.html#terminal-de-comandos-interativo",
    "title": "Python Básico",
    "section": "Terminal de Comandos Interativo",
    "text": "Terminal de Comandos Interativo"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#arquivos-.py",
    "href": "slides/02-python-basico/02-python-basico.html#arquivos-.py",
    "title": "Python Básico",
    "section": "Arquivos .py",
    "text": "Arquivos .py"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#jupyter-notebook",
    "href": "slides/02-python-basico/02-python-basico.html#jupyter-notebook",
    "title": "Python Básico",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#zen-do-python",
    "href": "slides/02-python-basico/02-python-basico.html#zen-do-python",
    "title": "Python Básico",
    "section": "Zen do python",
    "text": "Zen do python\nimport this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nReadability counts.\nIf the implementation is hard to explain, it's a bad idea."
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nTipos das variáveis determinados automaticamente:\n\n x = 4 \n type(x) # int\n s = \"alo\"\n type(s) # str"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-1",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-1",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nIndentação obrigatória:\n\nif x % 2 == 0:\n    cont_par += 1 # Código indentado\nelse:\n    cont_impar += 1 # Código indentado"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-2",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-2",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\n; não é necessário\n\n i = 5\n i +=1\n print(i)"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-3",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-3",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nLaços for:\n\nC++:\n\nfor(int i=0; i < n; i++){\n  cout << i << endl;\n}\n\nPython:\n\nfor i in range(0,n): # até n-1\n  print(i)"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-4",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-4",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nErros que não sejam de sintaxe só são reconhecidos se o código for executado\n\nx = 50\ny = 100\n\nif x % 2 == 0:\n    print('x é par')\n    print(y)\nelse:\n    print('x não é par')\n    print(z) # z não foi declarado"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#jupyter-notebook-1",
    "href": "slides/02-python-basico/02-python-basico.html#jupyter-notebook-1",
    "title": "Python Básico",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\nRoteiro com comandos básicos Python e exercícios:\n02-Python-Basico"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#editando-arquivos-.py",
    "href": "slides/02-python-basico/02-python-basico.html#editando-arquivos-.py",
    "title": "Python Básico",
    "section": "Editando Arquivos .py",
    "text": "Editando Arquivos .py"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetivos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetivos",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetivos",
    "text": "Objetivos\nNesta aula, você aprenderá:\n\nA definir uma classe\nA adicionar atributos, métodos e construtores a uma classe\nNovos comandos básicos de Python"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-e-abstrações",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-e-abstrações",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes e Abstrações",
    "text": "Classes e Abstrações\nConsidere um carro:\n\nQuais são as características de um carro?\nQue coisas um carro pode “fazer”?\nTodos os carros alcançam a mesma velocidade?\n\n\n\nFoto: Revista carro"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nEnvolve implementar programas que possuem objetos interagindo entre si:\n\nDiferentemente de programação estruturada onde funções/comandos interagem entre si"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nQualquer coisa pode ser um objeto:\n\n“Coisas” do mundo real (carro, casa, avião, animal, etc.)\nGrandezas matemáticas (vetor, matriz, polinômio, etc.)\nAbstrações no contexto de um problema (gerenciador de banco de dados, gerenciador de conexões, fábrica de personagens, etc.)"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes",
    "text": "Classes\n\nSão abstrações para agrupar objetos que têm um comportamento comum\nDescrevem de maneira abstrata o comportamento dos objetos\nÉ uma especificação para objetos daquela classe, similar a uma planta baixa"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes",
    "text": "Classes\n\n\n\n\n\n\nA palavra classe vem da taxonomia da biologia. Todos os seres vivos de uma mesma classe biológica têm uma série de atributos e comportamentos em comum, mas eles não são iguais, podem variar nos valores desses atributos e como realizam esses comportamentos."
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetos",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetos",
    "text": "Objetos\n\nSão instâncias de uma classe\n\nUm Chevrolet Onix é uma instância da classe Carro\n\nEncapsulam um estado:\n\nConjunto de valores que os atributos possuem\nPor exemplo, uma instância da classe Carro pode ter potência igual a 90, marca Chevrolet, etc."
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetos-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetos-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetos",
    "text": "Objetos\n\nPossuem um comportamento definido através dos seus métodos\n\nMétodos são funções chamadas/executadas por um objeto\nTêm os seus métodos chamados para executar uma ação no programa"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado",
    "title": "Classes, Objetos e Abstração",
    "section": "Atributo e Estado",
    "text": "Atributo e Estado\nO estado de um objeto está definido pelos valores dos atributos de classe\nOs tipos dos atributos podem ser:\n\nTipos que a linguagem fornece: int, float, str, etc.\nTipos definidos pelo usuário (outras classes)"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Atributo e Estado",
    "text": "Atributo e Estado\nO estado de um objeto é definido pelos valores dos seus atributos:\n\n\n\n\nClass Carro:\n // Atributos\n  - marca\n  - potencia"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo",
    "title": "Classes, Objetos e Abstração",
    "section": "Tipos Estruturados vs POO",
    "text": "Tipos Estruturados vs POO\nConsidere a classe Circulo:\n\nQuais são as características de um círculo ?\n\nEm C++ provavelmente definiríamos o tipo estruturado:\nstruct Circulo{\n    double x,y; // Coordenadas do centro\n    double raio; //Raio\n };"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Tipos Estruturados vs POO",
    "text": "Tipos Estruturados vs POO\nEntretanto, o tipo Circulo definido como struct:\n\nÉ utilizado apenas para armazenar dados\nNão tem um comportamento definido\n\nPara isto, existem classes!"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-em-python",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-em-python",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes em Python",
    "text": "Classes em Python\nEm Python, tudo é um objeto:\n>>> type(5)\n< class 'int' >\n>>> type(\"alo\")\n< class 'str' >\n\n\n\n\n\n\nVariáveis possuem tipos == objetos possuem classes"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#variáveis-possuem-tipos-objetos-possuem-classes",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#variáveis-possuem-tipos-objetos-possuem-classes",
    "title": "Classes, Objetos e Abstração",
    "section": ">> Variáveis possuem tipos == objetos possuem classes",
    "text": ">> Variáveis possuem tipos == objetos possuem classes"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-2",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-2",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nProgramar orientado a objetos envolve:\n\nIdentificar classes que agrupam objetos com um comportamento comum\nIdentificar os atributos que cada objeto deve armazenar\nIdentificar como os objetos devem se comportar\nIdentificar como os objetos do sistema devem interagir entre si"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-3",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-3",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\n\n\n\nSe eu identifiquei que classes (objetos) o meu programa deve ter, como saber que atributos e métodos estas classes devem ter?"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração",
    "title": "Classes, Objetos e Abstração",
    "section": "Primeiro pilar de POO: Abstração",
    "text": "Primeiro pilar de POO: Abstração\nAbstração: escolher os aspetos mais relevantes para as classes/objetos a serem implementados\n\nSimplicidade: atributos irrelevantes devem ser ignorados\nDividir e conquistar: o propósito de uma classe deve estar bem definido\n\nImplemente várias classes com propósitos diferentes, uma utilizando a outra, se for o caso"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Primeiro pilar de POO: Abstração",
    "text": "Primeiro pilar de POO: Abstração\n\nImagem: The Cat as a Metaphor in OO Software Development"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#imagem-de-the-cat-as-a-metaphor-in-oo-software-development",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#imagem-de-the-cat-as-a-metaphor-in-oo-software-development",
    "title": "Classes, Objetos e Abstração",
    "section": "Imagem de The Cat as a Metaphor in OO Software Development",
    "text": "Imagem de The Cat as a Metaphor in OO Software Development"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#jupyter-notebook",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#jupyter-notebook",
    "title": "Classes, Objetos e Abstração",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n03-Classes-Objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#revisão",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#revisão",
    "title": "Encapsulamento",
    "section": "Revisão",
    "text": "Revisão\nClasse: abstração para agrupar objetos comuns\nObjetos: instâncias de uma classe"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#revisão-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#revisão-1",
    "title": "Encapsulamento",
    "section": "Revisão",
    "text": "Revisão\n\nAtributos: características da entidade sendo modelada\nMétodos: definem o comportamento\nInicializaodor: inicializa os atributos (construtor em outras linguagens)\nself: referência que um objeto tem dele mesmo"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#objetivos",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#objetivos",
    "title": "Encapsulamento",
    "section": "Objetivos",
    "text": "Objetivos\nAula de hoje:\n\nEncapsulamento: segundo pilar de POO\nSetters/getters e @property: primeiro decorador em Python"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nCapacidade de esconder informações (dados) nos objetos\n\n\nAlguns atributos/métodos são usados apenas como parte da lógica da implementação da classe\nEstes atributos/métodos devem ser impedidos de serem utilizados fora da classe"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#interface-pública-de-uma-classe",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#interface-pública-de-uma-classe",
    "title": "Encapsulamento",
    "section": "Interface Pública de uma Classe",
    "text": "Interface Pública de uma Classe\n\nToda classe tem uma interface pública: conjunto de métodos que devem ser chamados para que objetos de uma classe sejam utilizados\nA interface pública da classe informa ao usuário da classe como ele deve utilizá-la\n\nUsuário da classe é quem utiliza a classe e portanto é um programador\nUsuário da classe não é o mesmo que o usuário do programa (que é uma pessoa que não necessariamente entende de programação)"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-1",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nAs classes devem expôr o mínimo necessário para serem utilizadas\n\nSimilar a funções: os dados mínimos que elas precisam são os parâmetros e as suas variáveis locais não ficam acessíveis por quem as chama"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nOs modificadores de acesso valem para atributos e métodos:\n\nPúblico: o atributo/método pode ser acessado/chamado de dentro ou fora da classe\nPrivado: o atributo/método só pode ser acessado/chamado de dentro da classe; ele não é herdado pelas subclasses\nProtegido: o atributo/método só pode ser acessado/chamado de dentro da classe; ele é herdado pelas subclasses"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-1",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nA implementação dos modificadores:\n\nÉ dependente da linguagem:\n\nC++ e Java usam palavras chave private e public"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-2",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nExemplo em Java\npublic class Pessoa\n{\n    // Atributos\n    private String nome;\n    private int idade;\n\n    // Método público\n    public void cumprimenta(Pessoa outro)\n    {\n      ...\n    }\n}\nEm Python, não é assim que funciona. Mais sobre isto no notebook da aula."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nPara motivar a necessidade de encapsulamento, vamos pensar em uma classe para denotar um estacionamento"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-1",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\n\nUm estacionamento tem capacidade para um número n > 0 de vagas.\nDevemos controlar quantos carros estão dentro do estacionamento.\nOs carros podem entrar só se há vagas disponíveis."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-2",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nNesse sistema podemos identificar:\n\nClasses: Carros e o estacionamento (vamos ignorar os carros neste exemplo)\nAtributos: número de vagas, capacidade máxima\nMétodos: O estacionamento pode registrar uma entrada e uma saída de um carro. Além disso, o estacionamento deve fornecer o número de vagas disponíveis."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-3",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-3",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nPergunta: o usuário da classe Estacionamento deveria modificar diretamente o atributo vagas?\nPara responder, pense na consistência do objeto Estacionamento. Ela pode ser mantida dessa forma?"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-2",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nOs usuários da classe só podem acessar os atributos e métodos públicos da classe\nAo chamar um método, o usuário da classe pode ignorar como ele foi implementado\n\nBasta que ele saiba o que deve ser passado como parâmetro e qual o retorno do método para chamá-lo\n\nFacilita a manutenção e reaproveitamento do código"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-em-python",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-em-python",
    "title": "Encapsulamento",
    "section": "Encapsulamento em Python",
    "text": "Encapsulamento em Python\n04-Encapsulamento\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#relembrando",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#relembrando",
    "title": "Encapsulamento",
    "section": "Relembrando",
    "text": "Relembrando\nClasse: abstração para agrupar objetos comuns\nObjetos: instâncias de uma classe"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#relembrando-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#relembrando-1",
    "title": "Encapsulamento",
    "section": "Relembrando",
    "text": "Relembrando\n\nAtributos: características da entidade sendo modelada\nMétodos: definem o comportamento\nInicializador: inicializa os atributos (construtor em outras linguagens)\nself: referência que um objeto tem dele mesmo"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-3",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-3",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\nUtilizado para:\n\nEsconder os atributos de uma classe\nEsconder como funcionam os métodos da classe\nFacilitar o reaproveitamento de código\nGarantir a consistência (do estado) dos objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-4",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-4",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nA resposta é Não!: o valor do atributo vagas não deve ser modificado diretamente.\n\nIsto deve ser feito exclusivamente utilizando chamada aos método que informam que um carro entrou ou saiu do estacionamento. Estes métodos, por sua vez, são quem deve alterar o a quantidade de vagas do estacionamento."
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relembrando",
    "href": "slides/06-relacoes/06-relacoes.html#relembrando",
    "title": "Relações entre Classes",
    "section": "Relembrando",
    "text": "Relembrando\nClasse: abstração para agrupar objetos comuns\nObjetos: instâncias de uma classe"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relembrando-1",
    "href": "slides/06-relacoes/06-relacoes.html#relembrando-1",
    "title": "Relações entre Classes",
    "section": "Relembrando",
    "text": "Relembrando\n\nAtributos: características da entidade sendo modelada\nMétodos: definem o comportamento\nInicializador: inicializa os atributos (construtor em outras linguagens)\nself: referência que um objeto tem dele mesmo"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#interfaces-e-encapsulamento",
    "href": "slides/06-relacoes/06-relacoes.html#interfaces-e-encapsulamento",
    "title": "Relações entre Classes",
    "section": "Interfaces e Encapsulamento",
    "text": "Interfaces e Encapsulamento\nMembros privados:\n\nMétodos e atributos que não devem ser visíveis para os usuários da classe\nUtilizados apenas internamente, pela própria classe\n\nMembros públicos:\n\nMétodos que podem ser chamados externamente\nEspecificam um contrato: operações que o objeto pode realizar"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#interfaces-e-encapsulamento-1",
    "href": "slides/06-relacoes/06-relacoes.html#interfaces-e-encapsulamento-1",
    "title": "Relações entre Classes",
    "section": "Interfaces e Encapsulamento",
    "text": "Interfaces e Encapsulamento\n\nAlterações no estado de um objeto acontecem através da chamada de seus métodos\n\nAtributos não devem ser modificados diretamente (a não ser via getters/setters)\n\nAs mudanças na implementação da classe não devem afetar o código usuário da classe"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#aula-de-hoje",
    "href": "slides/06-relacoes/06-relacoes.html#aula-de-hoje",
    "title": "Relações entre Classes",
    "section": "Aula de Hoje",
    "text": "Aula de Hoje\nProgramas do mundo real (mais complexos) são implementados por várias classes que se relacionam entre si"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#aula-de-hoje-1",
    "href": "slides/06-relacoes/06-relacoes.html#aula-de-hoje-1",
    "title": "Relações entre Classes",
    "section": "Aula de Hoje",
    "text": "Aula de Hoje\nObjetivos desta aula:\n\nIntroduzir o conceito de diagrama de classes\nExplicar como os objetos se relacionam em um sistema orientado a objetos\nIdentificar os diferentes tipos de relacionamento entre classes\nImplementar relações entre classes em Python"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#implementação-de-classes",
    "href": "slides/06-relacoes/06-relacoes.html#implementação-de-classes",
    "title": "Relações entre Classes",
    "section": "Implementação de Classes",
    "text": "Implementação de Classes\n\nAté então, vocês implementaram uma (ou no máximo duas) classes para os programas solicitados\nA partir desta aula, deverá ficar claro quando mais de uma classe se torna necessário e qual o papel de cada uma delas\n\nComo elas se relacionam entre si"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#implementação-de-classes-1",
    "href": "slides/06-relacoes/06-relacoes.html#implementação-de-classes-1",
    "title": "Relações entre Classes",
    "section": "Implementação de Classes",
    "text": "Implementação de Classes\nAntes disto, para facilitar:\n\nComo podemos mostrar/visualizar rapidamente o que possui uma classe?"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml",
    "href": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml",
    "title": "Relações entre Classes",
    "section": "Diagrama de Classe UML",
    "text": "Diagrama de Classe UML"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml-1",
    "href": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml-1",
    "title": "Relações entre Classes",
    "section": "Diagrama de Classe UML",
    "text": "Diagrama de Classe UML\nBlocos representam classes:\n\nParte superior: atributos\nParte inferior: métodos\n\nApenas o tipo dos parâmetros e tipo de retorno\n\n- denota um atributo/método privado\n+ denota um atributo/método público"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml-2",
    "href": "slides/06-relacoes/06-relacoes.html#diagrama-de-classe-uml-2",
    "title": "Relações entre Classes",
    "section": "Diagrama de Classe UML",
    "text": "Diagrama de Classe UML\nDiagrama de classe da linguagem unificada de modelagem (UML):\n\nFacilita a visão geral de sistemas maiores\nFerramenta sugerida: Draw IO\n\nVocê pode utilizar qualquer outra"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Associação",
    "text": "Relacionamentos de Associação\n\nIndicam alguma associação significativa e de interesse entre objetos\nEspecificam que objetos de uma classe estão de alguma forma associados a objetos de uma outra classe\n\nPode indicar associação entre objetos de mesma classe"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-1",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-1",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Associação",
    "text": "Relacionamentos de Associação\nExemplos:\n\nEm um Estacionamento estão estacionados os Carros\nUm Professor ministra várias Disciplinas\nUma Mensagem possui um Remetente e um Destinatário\nUma Pessoa tem outra Pessoa como a sua mãe"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-2",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-2",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Associação",
    "text": "Relacionamentos de Associação\n\n\n\n\n\nNotação de associação em diagrama de classes: linha conectando as classes que estão associadas\n\nUm objeto tipo A está associado com zero ou vários objetos tipo B\nUm objeto tipo B está associado com um objeto tipo A"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#multiplicidade",
    "href": "slides/06-relacoes/06-relacoes.html#multiplicidade",
    "title": "Relações entre Classes",
    "section": "Multiplicidade",
    "text": "Multiplicidade\nNas extremidades da linha denotando a associação, está a multiplicidade:\n\n0 : zero\n0..1: zero ou um\n1 : um\n1..*: um ou mais\n0..* ou *: zero ou mais"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-3",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-3",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Associação",
    "text": "Relacionamentos de Associação\nExemplo\nUm banco, no qual cada conta bancaria está associada a uma pessoa (o titular da conta):"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-4",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-associação-4",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Associação",
    "text": "Relacionamentos de Associação\nExemplo\nObserve que este diagrama representa uma regra específica da aplicação:\n\nUma pessoa pode ter mais de uma conta? \\(\\rightarrow\\) Sim\nÉ possível existirem contas conjuntas? \\(\\rightarrow\\) Não"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Agregação",
    "text": "Relacionamentos de Agregação\n\nRepresenta uma relação todo-parte fraca\nAs partes podem existir sem o todo"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-1",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-1",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Agregação",
    "text": "Relacionamentos de Agregação\nExemplos:\n\nRelação entre o Carro, as Rodas e o Motor\nRelação entre um Computador, o Teclado, a Tela\n\nConsidere que em ambos os exemplos, o objeto todo pode ser instanciado sem as suas partes (e vice-versa)"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-2",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-2",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Agregação",
    "text": "Relacionamentos de Agregação\n\n\n\n\n\nEm um diagrama de classes:\n\nA é o “todo”\n\nDiamante vazado na classe “todo”\n\nB são as “partes”\nLinha conectando “todo” com “partes”"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-3",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-3",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Agregação",
    "text": "Relacionamentos de Agregação\nExemplo\nUm carro que possui 1 motor e 4 rodas"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-4",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-agregação-4",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Agregação",
    "text": "Relacionamentos de Agregação\nCom agregação:\n\nObjetos Motor e Roda são instanciados\nEstas instâncias são então associadas a um Carro\nOu seja, Motor, Roda e Carro podem ser instanciados independentemente\nSe um Carro é removido da memória, o Motor e Roda a ele associados continuam a existir"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Composição",
    "text": "Relacionamentos de Composição\n\nRepresenta uma relação todo-parte forte\nSe o objeto todo deixar de existir, os seus objetos parte também devem deixar de existir"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-1",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-1",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Composição",
    "text": "Relacionamentos de Composição\nExemplos:\n\nUm Estacionamento e seus Andares\nUm Prédio e suas Salas"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-2",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-2",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Composição",
    "text": "Relacionamentos de Composição\n\n\n\n\n\nEm um diagrama de classes:\n\nA é o “todo”\n\nDiamante preenchido na classe “todo”\n\nLinha conectando “todo” com “partes”"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-3",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-3",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Composição",
    "text": "Relacionamentos de Composição\nExemplo\nPrédio com várias salas"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-4",
    "href": "slides/06-relacoes/06-relacoes.html#relacionamentos-de-composição-4",
    "title": "Relações entre Classes",
    "section": "Relacionamentos de Composição",
    "text": "Relacionamentos de Composição\nCom composição:\n\nObjetos Predio são instanciados e, dentro do seu inicializador, objetos Sala também o são\nOu seja, Predio instancia Sala automaticamente\nNão é possível instanciar Predio sem Salas\nSe um Predio é removido da memória, as Sala a ele associadas também são removidas"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#resumindo",
    "href": "slides/06-relacoes/06-relacoes.html#resumindo",
    "title": "Relações entre Classes",
    "section": "Resumindo",
    "text": "Resumindo\nAssociação\n\nRelação genérica entre duas classes\nNenhum objeto é considerado dono/proprietário do outro objeto"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#resumindo-1",
    "href": "slides/06-relacoes/06-relacoes.html#resumindo-1",
    "title": "Relações entre Classes",
    "section": "Resumindo",
    "text": "Resumindo\nAgregação\n\nRelação tem um fraca: um objeto da classe A tem um (ou mais) objeto da classe B\nObjetos da classe A podem existir objetos da classe B\n\nObserve que neste caso, o objeto da classe A pode não estar pronto para uso (estado inconsistente \\(\\rightarrow\\) ele pode precisar de objetos da classe B para funcionar corretamente)"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#resumindo-2",
    "href": "slides/06-relacoes/06-relacoes.html#resumindo-2",
    "title": "Relações entre Classes",
    "section": "Resumindo",
    "text": "Resumindo\nComposição\n\nRelação tem um forte: um objeto da classe A tem um (ou mais) objeto da classe B\nObjetos da classe A instanciam também objetos da classe B\nObjetos da classe B deixam de existir quando objetos da classe proprietária A deixam de existir"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relações-entre-objetos-e-abstração",
    "href": "slides/06-relacoes/06-relacoes.html#relações-entre-objetos-e-abstração",
    "title": "Relações entre Classes",
    "section": "Relações entre Objetos e Abstração",
    "text": "Relações entre Objetos e Abstração\n\nA escolha de uma forma de relação específica está atrelada à abstração empregada no domínio do problema"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relações-entre-objetos-e-abstração-1",
    "href": "slides/06-relacoes/06-relacoes.html#relações-entre-objetos-e-abstração-1",
    "title": "Relações entre Classes",
    "section": "Relações entre Objetos e Abstração",
    "text": "Relações entre Objetos e Abstração\nAs classes Motor, Roda e Carro, por exemplo, podem ser implementadas como:\n\nAgregação, quando for de interesse que Motor e Roda sejam instanciados sem depender de um Carro\nComposição, quando for de interesse que Motor e Roda só sejam instanciados quando um Carro for instanciado"
  },
  {
    "objectID": "slides/06-relacoes/06-relacoes.html#relações-entre-classes",
    "href": "slides/06-relacoes/06-relacoes.html#relações-entre-classes",
    "title": "Relações entre Classes",
    "section": "Relações entre Classes",
    "text": "Relações entre Classes\n06-relacoes"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão",
    "title": "Biblioteca Padrão Python",
    "section": "Revisão",
    "text": "Revisão\nEncapsulamento\n\nProtege o acesso direto aos atributos de um objeto\nEsconde como funcionam as rotinas (métodos) da classe\nAs classes devem expôr o mínimo necessário para serem utilizadas"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão-1",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão-1",
    "title": "Biblioteca Padrão Python",
    "section": "Revisão",
    "text": "Revisão\nEncapsulamento\n\nAo chamar um método, podemos ignorar como ele foi implementado\nOs usuários da classe só devem acessar os atributos/métodos públicos da classe (interface pública)"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#objetivos",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#objetivos",
    "title": "Biblioteca Padrão Python",
    "section": "Objetivos",
    "text": "Objetivos\nNesta aula, serão mostradas as seguintes classes da biblioteca padrão de Python:\n\ntuple (pares ordenados, tuplas, etc)\nlist (listas de elementos)\nstr (strings)\ndict (dicionários)"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#estruturas-de-dados-e-biblioteca-padrão",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#estruturas-de-dados-e-biblioteca-padrão",
    "title": "Biblioteca Padrão Python",
    "section": "Estruturas de Dados e Biblioteca Padrão",
    "text": "Estruturas de Dados e Biblioteca Padrão\n05-Biblioteca-Padrão"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#objetivo",
    "href": "slides/08-heranca/08-heranca.html#objetivo",
    "title": "Herança",
    "section": "Objetivo",
    "text": "Objetivo\nApresentar o mecanismo de herança:\n\nO que é herança em POO\nComo utilizá-la na linguagem Python"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#os-quatro-pilares-de-poo",
    "href": "slides/08-heranca/08-heranca.html#os-quatro-pilares-de-poo",
    "title": "Herança",
    "section": "Os Quatro Pilares de POO",
    "text": "Os Quatro Pilares de POO\n\nAbstração\nEncapsulamento\nHerança: permite a reutilização de comportamento entre classes\nPolimorfismo"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#herança",
    "href": "slides/08-heranca/08-heranca.html#herança",
    "title": "Herança",
    "section": "Herança",
    "text": "Herança\n\nCapacidade de uma classe herdar o comportamento definido por outra classe\nPossibilita a reutilização de código entre classes que apresentam alguma similaridade entre si"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#herança-1",
    "href": "slides/08-heranca/08-heranca.html#herança-1",
    "title": "Herança",
    "section": "Herança",
    "text": "Herança\n\nUm novo tipo de relação entre classes\nAcontece entre objetos genéricos e objetos específicos"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#uml-herança",
    "href": "slides/08-heranca/08-heranca.html#uml-herança",
    "title": "Herança",
    "section": "UML: Herança",
    "text": "UML: Herança\n\n\n\n\n\n\nRelação do tipo “é um”: “um objeto B é um objeto A”\nClasse B herda o comportamento (atributos e métodos) da classe A\nA: classe base, classe mãe ou superclasse\nB: classe derivada, classe filha ou subclasse"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#herança-2",
    "href": "slides/08-heranca/08-heranca.html#herança-2",
    "title": "Herança",
    "section": "Herança",
    "text": "Herança\n\nAs superclasses devem oferecer comportamentos genéricos\nAs subclasses devem oferecer comportamentos específicos"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#exemplos",
    "href": "slides/08-heranca/08-heranca.html#exemplos",
    "title": "Herança",
    "section": "Exemplos",
    "text": "Exemplos\nRelações de herança entre classes:\n\nPessoa e Aluno: todo aluno (objeto específico) é uma pessoa (objeto genérico)\nMeioDeTransporte e Carro: todo carro (objeto específico) é um meio de transporte (objeto genérico)\nSensor e Sonar: todo sonar (objeto específico) é um sensor (objeto genérico)\nPoligono e Triangulo: todo triângulo (objeto específico) é um polígono (objeto genérico)"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#mais-um-exemplo",
    "href": "slides/08-heranca/08-heranca.html#mais-um-exemplo",
    "title": "Herança",
    "section": "Mais um exemplo",
    "text": "Mais um exemplo\nDiagrama de classe envolvendo heranças:"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#onde-herança-pode-ser-útil",
    "href": "slides/08-heranca/08-heranca.html#onde-herança-pode-ser-útil",
    "title": "Herança",
    "section": "Onde Herança pode ser útil?",
    "text": "Onde Herança pode ser útil?\n\nAs relações de herança definem uma hierarquia de classes onde as subclasses herdam as características das suas superclasses\nÉ útil para definir um comportamento em comum para objetos de uma mesma hierarquia\n\nO código da classe base é reutilizado em todas as subclasses\nQualquer alteração no código da classe base é propagado para todas as subclasses"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#onde-herança-pode-ser-útil-1",
    "href": "slides/08-heranca/08-heranca.html#onde-herança-pode-ser-útil-1",
    "title": "Herança",
    "section": "Onde Herança pode ser útil?",
    "text": "Onde Herança pode ser útil?\n\nO comportamento comum a várias classes pode ser definido em uma superclasse\nAlém de reutilizar código, as subclasses também podem:\n\nReescrever completamente os métodos que ditam o comportamento da classe (method overriding)\nEstender os métodos que ditam o comportamento da classe (utilizando parte da implementação base)"
  },
  {
    "objectID": "slides/08-heranca/08-heranca.html#como-funciona-na-prática",
    "href": "slides/08-heranca/08-heranca.html#como-funciona-na-prática",
    "title": "Herança",
    "section": "Como Funciona na Prática",
    "text": "Como Funciona na Prática\n08-heranca\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#objetivo",
    "href": "slides/09-membros-static/09-membros-static.html#objetivo",
    "title": "Atributos e Métodos de Classe",
    "section": "Objetivo",
    "text": "Objetivo\nApresentar atributos e métodos de classe:\n\nUtilidade\nSintaxe em Python"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-classe",
    "href": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-classe",
    "title": "Atributos e Métodos de Classe",
    "section": "Atributos e Métodos de Classe",
    "text": "Atributos e Métodos de Classe\n\nFrequentemente, é desejável ter atributos/métodos que são “globais”, ou seja, que não dizem respeito a uma instância específica de uma classe\nPor exemplo:\n\nO endereço IP de um servidor de banco de dados\nAs possíveis cores de um Carro\nA quantidade de instâncias criadas de uma classe"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-instância-vs.-atributos-e-métodos-de-classe",
    "href": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-instância-vs.-atributos-e-métodos-de-classe",
    "title": "Atributos e Métodos de Classe",
    "section": "Atributos e Métodos de Instância vs. Atributos e Métodos de Classe",
    "text": "Atributos e Métodos de Instância vs. Atributos e Métodos de Classe\nAté então, todos os atributos e métodos vistos são de instância:\n\nDizem respeito a uma instância/objeto específico daquela classe\nSão comumente chamados de atributos/métodos (a parte de instância do nome atributo de instância é implícita)"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-instância-vs.-atributos-e-métodos-de-classe-1",
    "href": "slides/09-membros-static/09-membros-static.html#atributos-e-métodos-de-instância-vs.-atributos-e-métodos-de-classe-1",
    "title": "Atributos e Métodos de Classe",
    "section": "Atributos e Métodos de Instância vs. Atributos e Métodos de Classe",
    "text": "Atributos e Métodos de Instância vs. Atributos e Métodos de Classe\n\nAtributos e métodos de classe dizem respeito à classe, e não a um objeto específico daquela classe\n\nTambém chamados de atributos/métodos estáticos\nNão precisam de uma instância da classe para serem utilizados\n\nÚteis para compartilhar informações entre todos os objetos de uma mesma classe"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#uml-atributos-e-métodos-de-classe",
    "href": "slides/09-membros-static/09-membros-static.html#uml-atributos-e-métodos-de-classe",
    "title": "Atributos e Métodos de Classe",
    "section": "UML: Atributos e Métodos de Classe",
    "text": "UML: Atributos e Métodos de Classe\n\n\n\n\n\nNotação UML: texto sublinhado indica métodos e atributos de classe (estáticos)"
  },
  {
    "objectID": "slides/09-membros-static/09-membros-static.html#como-funciona-na-prática",
    "href": "slides/09-membros-static/09-membros-static.html#como-funciona-na-prática",
    "title": "Atributos e Métodos de Classe",
    "section": "Como Funciona na Prática",
    "text": "Como Funciona na Prática\n09-Membros-Static\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-Classes-Abstratas.html#classe-abstrata---uml",
    "href": "slides/10-classes-abstratas/10-Classes-Abstratas.html#classe-abstrata---uml",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata - UML",
    "text": "Classe Abstrata - UML\nNa notação UML, uma classe abstrata possui seu nome em itálico, assim como os métodos abstratos:"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-Classes-Abstratas.html#observações-importantes",
    "href": "slides/10-classes-abstratas/10-Classes-Abstratas.html#observações-importantes",
    "title": "Classes Abstratas",
    "section": "Observações Importantes",
    "text": "Observações Importantes\n\nClasses concretas não podem ter métodos abstratos\nSe a subclasse não sobrescreve todos os métodos abstratos da superclasse, ela também é abstrata\nUma classe abstrata pode ter métodos abstratos e métodos implementados"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-Classes-Abstratas.html#classe-abstrata-2",
    "href": "slides/10-classes-abstratas/10-Classes-Abstratas.html#classe-abstrata-2",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata",
    "text": "Classe Abstrata\nUso em sistemas reais:\n\nProver funcionalidade comum a uma hierarquia de classes\nExtensão de programas: por exemplo, plugins"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#objetivo-da-aula",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#objetivo-da-aula",
    "title": "Classes Abstratas",
    "section": "Objetivo da aula",
    "text": "Objetivo da aula\n\nApresentar o mecanismo de classes abstratas\nO que são classes abstratas\nIdentificar quando utilizar classes abstratas em um projeto orientado a objetos\nComo utilizá-las na linguagem Python"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#herança-revisão",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#herança-revisão",
    "title": "Classes Abstratas",
    "section": "Herança (revisão)",
    "text": "Herança (revisão)\n\nPermite que classes derivadas herdem o comportamento (atributos e métodos) de uma classe base\nIntroduz a relação “é um” (ex.: “trem” é um “meio de transporte”)\nO código da superclasse é reutilizado pelas classes derivadas\nAs classes derivadas podem sobrescrever métodos da superclasse com funcionalidades específicas"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#herança-revisão-1",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#herança-revisão-1",
    "title": "Classes Abstratas",
    "section": "Herança (revisão)",
    "text": "Herança (revisão)\nObserve esta implementação do sistema de contas bancárias:\n\n\n\n\n\nFaz sentido criar objetos tipo Conta? Qual a sua utilidade?"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata",
    "text": "Classe Abstrata\n\nÉ uma classe que não deve ser instanciada\nDefine um comportamento comum para outras classes derivadas\nToda classe que não é abstrata é chamada classe concreta"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata-1",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata-1",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata",
    "text": "Classe Abstrata\nClasses abstratas são em geral utilizadas para:\n\nOferecer código para ser reutilizado por classes derivadas\nEspecificar uma interface pública a ser implementada por classes derivadas\n\nQuais métodos a classe derivada deve possuir\nQue parâmetros eles devem ter"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#método-abstrato",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#método-abstrato",
    "title": "Classes Abstratas",
    "section": "Método Abstrato",
    "text": "Método Abstrato\n\nEstão presentes somente em classes abstratas\nÉ um método que deve ser obrigatoriamente sobrescrito nas classes derivadas\nSe a classe possui pelo menos um método abstrato, então ela é uma classe abstrata (não é possível instanciar objetos desta classe)\nEm geral, um método abstrato não possui implementação\n\nApenas especifica tipo de retorno e parâmetros (igual à assinatura de uma função)\nEm Python: podem possuir implementação"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata---uml",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata---uml",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata - UML",
    "text": "Classe Abstrata - UML\nNa notação UML, uma classe abstrata possui seu nome e métodos abstratos em itálico:"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#observações-importantes",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#observações-importantes",
    "title": "Classes Abstratas",
    "section": "Observações Importantes",
    "text": "Observações Importantes\n\nClasses concretas não podem ter métodos abstratos\nSe a subclasse não sobrescreve todos os métodos abstratos da superclasse, ela também é abstrata\nUma classe abstrata pode ter métodos abstratos e métodos implementados"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata-2",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#classe-abstrata-2",
    "title": "Classes Abstratas",
    "section": "Classe Abstrata",
    "text": "Classe Abstrata\nUso em sistemas reais:\n\nProver funcionalidade comum a uma hierarquia de classes\nExtensão de programas: por exemplo, plugins"
  },
  {
    "objectID": "slides/10-classes-abstratas/10-classes-abstratas.html#como-funciona-na-prática",
    "href": "slides/10-classes-abstratas/10-classes-abstratas.html#como-funciona-na-prática",
    "title": "Classes Abstratas",
    "section": "Como Funciona na Prática",
    "text": "Como Funciona na Prática\n10-classes-abstratas"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#objetivo-da-aula",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#objetivo-da-aula",
    "title": "Polimorfismo",
    "section": "Objetivo da aula",
    "text": "Objetivo da aula\nNesta aula veremos:\n\nO que é polimorfismo\nDuck typing\nComo a linguagem Python utiliza o polimorfismo"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#os-pilares-de-poo",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#os-pilares-de-poo",
    "title": "Polimorfismo",
    "section": "Os Pilares de POO",
    "text": "Os Pilares de POO\n\nAbstração\nEncapsulamento\nHerança\nPolimorfismo"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo",
    "title": "Polimorfismo",
    "section": "Polimorfismo",
    "text": "Polimorfismo\n\n\n\n\n\n\nMecanismo presente em linguagens OO que permitem a um objeto se comportar de formas diferentes\n\n\n\n\nPoli: muitos, morfismo: formas\nMais um recurso utilizado para promover a reutilização de código\nUm mesmo código possui diferentes comportamentos"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-1",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-1",
    "title": "Polimorfismo",
    "section": "Polimorfismo",
    "text": "Polimorfismo\nNa prática, polimorfismo é oferecido por linguagens OO através de vários mecanismos.\nEstes mecanismos são mostrados a seguir, utilizando códigos de outras linguagens."
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-estaticamente-tipadas-java",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-estaticamente-tipadas-java",
    "title": "Polimorfismo",
    "section": "Polimorfismo em Linguagens Estaticamente Tipadas (Java)",
    "text": "Polimorfismo em Linguagens Estaticamente Tipadas (Java)\n\nInstanciando objetos da classe base utilizando construtores da classe derivada:\n\n// Gato é uma subclasse de Mamifero\nMamifero m = new Gato(); \n// Funcionario é uma subclasse de Pessoa\nPessoa p = new Funcionario(...); \n\n// Utilizando casting explicito\nGato g = new Gato();\nAnimal a = (Animal) G ;\n\n// Erro!! Nem toda pessoa é um funcionário\nFuncionario f = new Pessoa(...); \nPodemos atribuir objetos da subclasse a variáveis da superclasse"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-estaticamente-tipadas-java-1",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-estaticamente-tipadas-java-1",
    "title": "Polimorfismo",
    "section": "Polimorfismo em Linguagens Estaticamente Tipadas (Java)",
    "text": "Polimorfismo em Linguagens Estaticamente Tipadas (Java)\n\nConsidere um método que recebe como parâmetro objetos da classe base:\n\nvoid imprimeDados(Pessoa p){\n ...\n}\n\nFuncionario f = new Funcionario(...);\n// Como todo funcionário é uma pessoa,\n// podemos utilizar o método imprimirDados com parâmetro f\nimprimeDados(f); \nPodemos “substituir” o parâmetro do tipo Pessoa por um Funcionario (porque todo Funcionario é uma Pessoa)"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-tipadas-java",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-tipadas-java",
    "title": "Polimorfismo",
    "section": "Polimorfismo em Linguagens Tipadas (Java)",
    "text": "Polimorfismo em Linguagens Tipadas (Java)\n\nSobrecarga de funções: uma mesma função se comporta de diversas formas, de acordo com seus parâmetros:\n\nint funcao(int x);\nfloat funcao(float x);\nchar funcao(char x);\nA função funcao possui diferentes assinaturas"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-tipadas",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-linguagens-tipadas",
    "title": "Polimorfismo",
    "section": "Polimorfismo em Linguagens Tipadas",
    "text": "Polimorfismo em Linguagens Tipadas\n\nSobrecarga de operadores: algumas linguagens permitem implementar um método que define o comportamento dos operadores +, -, *, /, >, <, ==, etc.\n\n\nC++ permite\nC# permite\nObjective-C não permite\nJava não permite"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma",
    "title": "Polimorfismo",
    "section": "Python Funciona de Outra Forma",
    "text": "Python Funciona de Outra Forma\n\nObjetos da classe base recebendo objetos de classes derivadas:\n\nPessoa p = new Funcionario(...); \nNão tem sentido, porque em Python, uma variável pode ser atribuída a objetos de classes diferentes (que não necessariamente pertencem à mesma hierarquia)\nx = 4 \nx = [1,2,3]\nx = \"alo\" \nx = Pessoa(...) \nx = Carro(...)"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-1",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-1",
    "title": "Polimorfismo",
    "section": "Python Funciona de Outra Forma",
    "text": "Python Funciona de Outra Forma\n\nChamar funções/métodos com instâncias de alguma subclasse como parâmetro:\n\nComo não temos tipos, podemos chamar uma função/método passando como parâmetro objetos de classes diferentes:\nstr(3)\nstr(3.2)\np = Pessoa(...)\nstr(p)\nlen(\"alo\")\nlen([1,2,3])"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-2",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-2",
    "title": "Polimorfismo",
    "section": "Python Funciona de Outra Forma",
    "text": "Python Funciona de Outra Forma\n\nSobrecarga de funções:\n\ndef funcao(x):\n ...\n\ndef funcao(x,y):  # a definição anterior de f é substituída por esta\n ...\n\nf(4) # Erro! 2 parâmetros são esperados\nEm Python, não podemos criar 2 funções com diferentes assinaturas"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-3",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-3",
    "title": "Polimorfismo",
    "section": "Python Funciona de Outra Forma",
    "text": "Python Funciona de Outra Forma\nEntretanto, o seguinte código funciona perfeitamente:\nclass Pessoa:\n    def __init__(self, nome, idade): ...\n\n    def compara_idades(self, p2):\n        return p1.idade <= p2.idade\n\nclass Aluno(Pessoa): ...\nclass Professor(Pessoa): ...\n\np = Pessoa('joão', 25)\na = Aluno('maria', 20, 111) \nprint(p.compara_idades(a)) # método funciona pq um Aluno é uma Pessoa"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-2",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-2",
    "title": "Polimorfismo",
    "section": "Polimorfismo",
    "text": "Polimorfismo\nCom polimorfismo, a chamada dos métodos é polimórfica: a mesma chamada pode se comportar de diferentes formas, de acordo com a classe dos objetos envolvidos"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#o-princípio-da-substituição-de-liskov",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#o-princípio-da-substituição-de-liskov",
    "title": "Polimorfismo",
    "section": "O princípio da substituição de Liskov",
    "text": "O princípio da substituição de Liskov\n\n\n\n\n\nBarbara Liskov, cientista da computação estadunidense conhecida por criar o Princípio de Substituição de Liskov, por ser uma das primeiras mulheres a obter um PhD em Ciência da Computação nos Estados Unidos e pelas suas contribuições que levaram ao desenvolvimento de POO (Wikipedia)"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#o-princípio-da-substituição-de-liskov-1",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#o-princípio-da-substituição-de-liskov-1",
    "title": "Polimorfismo",
    "section": "O princípio da substituição de Liskov",
    "text": "O princípio da substituição de Liskov\n\nUma classe base deve poder ser substituída pela sua classe derivada\nConsidere o método q(x). Se q pode ser utilizado com objetos da superclasse T, então q deve poder também ser chamado com um objeto de uma subclasse S derivada de T"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-python",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#polimorfismo-em-python",
    "title": "Polimorfismo",
    "section": "Polimorfismo em Python",
    "text": "Polimorfismo em Python\nPython implementa todas as funcionalidades apresentadas até então seguindo um conceito chamado como duck typing"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#duck-typing",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#duck-typing",
    "title": "Polimorfismo",
    "section": "Duck Typing",
    "text": "Duck Typing\n\n\n\n\n\n\nQuando eu vejo um pássaro que anda como pato, nada como um pato e grasna como pato, então pra mim este pássaro é um pato\n\n\n\n\nPrincípio utilizado como base da linguagem Python\nLembre-se que Python possui tipagem dinâmica: o tipo dos objetos só pode ser determinado na execução do programa"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#duck-typing-1",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#duck-typing-1",
    "title": "Polimorfismo",
    "section": "Duck Typing",
    "text": "Duck Typing\nForma de tipagem que está mais interessada no que o objeto possui como atributos/métodos do que se ele é de uma determinada classe\nExemplos de uso de Duck typing:\n\nQuando usamos print(a): não interessa a classe de a, o objeto vai ser impresso (e o método __str__ é chamado)\nQuando usamos a.liga(): não interessa se o objeto a é da classe Motor ou da classe Lampada. A chamada irá ter sucesso ser o objeto possuir o método liga"
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-4",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#python-funciona-de-outra-forma-4",
    "title": "Polimorfismo",
    "section": "Python Funciona de Outra Forma",
    "text": "Python Funciona de Outra Forma\n\nSobrecarga de operadores:\n\nPython suporta através da implementação de métodos mágicos."
  },
  {
    "objectID": "slides/11-polimorfismo/11-polimorfismo.html#jupyter-notebook",
    "href": "slides/11-polimorfismo/11-polimorfismo.html#jupyter-notebook",
    "title": "Polimorfismo",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n11-polimorfismo\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/12-heranca-multipla/12-heranca-multipla.html#objetivo-da-aula",
    "href": "slides/12-heranca-multipla/12-heranca-multipla.html#objetivo-da-aula",
    "title": "Herança Múltipla",
    "section": "Objetivo da aula",
    "text": "Objetivo da aula\n\nApresentar o mecanismo de herança múltipla:\n\nO que é herança múltipla\nComo utilizá-lo na linguagem Python"
  },
  {
    "objectID": "slides/12-heranca-multipla/12-heranca-multipla.html#herança",
    "href": "slides/12-heranca-multipla/12-heranca-multipla.html#herança",
    "title": "Herança Múltipla",
    "section": "Herança",
    "text": "Herança\n\nPermite que classes derivadas herdem o comportamento (atributos e métodos) de uma classe base\nIntroduz a relação “é um”\nCódigo na classe base pode ser reutilizado nas classes derivadas\nClasse derivada pode reimplementar um método com funcionalidades específicas"
  },
  {
    "objectID": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla",
    "href": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla",
    "title": "Herança Múltipla",
    "section": "Herança Múltipla",
    "text": "Herança Múltipla\nPermite que a classe derivada possua mais de uma classe base\nEm Python, as classes base são indicadas por uma tupla:\nclass Subclasse(Superclasse1, Superclasse2):\n...\n\nSubclasse é a classe derivada\nTodos os atributos e métodos de Superclasse1 e Superclasse2 estão na subclasse"
  },
  {
    "objectID": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla-1",
    "href": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla-1",
    "title": "Herança Múltipla",
    "section": "Herança Múltipla",
    "text": "Herança Múltipla\nAs superclasses também podem ser classes abstratas\nTodos os métodos abstratos de todas as superclasses abstratas têm que ser implementados para que a subclasse seja concreta\nCaso contrário, a subclasse se torna uma classe abstrata"
  },
  {
    "objectID": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla-2",
    "href": "slides/12-heranca-multipla/12-heranca-multipla.html#herança-múltipla-2",
    "title": "Herança Múltipla",
    "section": "Herança Múltipla",
    "text": "Herança Múltipla\nO Jupyter Notebook contém exemplos práticos e problemas que podem acontecer com herança múltipla\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação",
    "href": "slides/14-excecoes/14-excecoes.html#motivação",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\nConsidere os métodos a seguir:\n@nome.setter\ndef nome(self, n):\n    '''Set para o nome de uma pessoa'''\n    if type(n) == str:\n        self._nome = n\n    else:\n        print('n precisa ser do tipo string')\ndef registraEntrada(self):\n    '''Entra um carro'''\n    if self.vagas > 0:\n        self.vagas -= 1\n        print(\"Um carro entrou.\")\n    else:\n        print(\"Estacionamento sem vagas\")"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação-1",
    "href": "slides/14-excecoes/14-excecoes.html#motivação-1",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\n\nO programa apenas imprime uma mensagem de erro\nEntretanto, a execução do programa continua\nComo fazer para o programa encerrar a sua execução?"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação-2",
    "href": "slides/14-excecoes/14-excecoes.html#motivação-2",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\nMais ainda:\n\nComo notificar o restante do programa que a execução do método não foi bem sucedida?\nComo tratar/detectar (por exemplo, por quem chamou o método) que a execução do método não foi bem sucedida?"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação-3",
    "href": "slides/14-excecoes/14-excecoes.html#motivação-3",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\nEstamos interessados em fazer o programa “emitir um erro”:\n\nEmitir erro: notificar e encerrar o programa\nFazer o programa “Levantar uma exceção”\n\nDo inglês “raise an exception”\nTambém conhecido em português como “lançar uma exceção” ou “subir uma exceção”"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação-4",
    "href": "slides/14-excecoes/14-excecoes.html#motivação-4",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\nVocê já deve ter se deparado com alguns erros em Python:\n\nÍndice não valido (fora dos limites):\n\n\nIndexError: list index out of range\n\n\nDivisão por 0:\n\n\nZeroDivisionError: division by zero"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#motivação-5",
    "href": "slides/14-excecoes/14-excecoes.html#motivação-5",
    "title": "Tratamento de Exceções",
    "section": "Motivação",
    "text": "Motivação\nVocê já deve ter se deparado com alguns erros em Python:\n\nUma variável inexistente é utilizada:\n\n\nNameError: name x is not defined"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#objetivo",
    "href": "slides/14-excecoes/14-excecoes.html#objetivo",
    "title": "Tratamento de Exceções",
    "section": "Objetivo",
    "text": "Objetivo\nApresentar o mecanismo de tratamento de exceções:\n\nO que é uma exceção\nComo levantar exceções em Python\nComo tratar exceções em Python\nComo implementar classes que representam exceções em Python"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento",
    "href": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento",
    "title": "Tratamento de Exceções",
    "section": "Exceções e Tratamento",
    "text": "Exceções e Tratamento\n\nUma exceção é um erro não necessariamente fatal detectável na execução de um programa\n\nDiferente de erro de compilação\n\nPara levantar uma exceção, utilizamos o comando raise\n\nSimilar ao comando throw de Java e C++"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento-1",
    "href": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento-1",
    "title": "Tratamento de Exceções",
    "section": "Exceções e Tratamento",
    "text": "Exceções e Tratamento\n\nException é a superclasse das exceções definidas pelo usuário\nA lista de classes de exceções predefinidas em Python está aqui"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento-2",
    "href": "slides/14-excecoes/14-excecoes.html#exceções-e-tratamento-2",
    "title": "Tratamento de Exceções",
    "section": "Exceções e Tratamento",
    "text": "Exceções e Tratamento\n\n\n\n\n\n(Imagem de Stanford Python Course (link))"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#tratamento-de-exceções",
    "href": "slides/14-excecoes/14-excecoes.html#tratamento-de-exceções",
    "title": "Tratamento de Exceções",
    "section": "Tratamento de Exceções",
    "text": "Tratamento de Exceções\n\nApós levantada, uma exceção pode ser tratada\nTratamento de exceções: trecho de código responsável por fazer o programa se recuperar da exceção levantada\nDe acordo com a classe da exceção, o programa pode tratá-la de forma diferente"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#ideia-geral",
    "href": "slides/14-excecoes/14-excecoes.html#ideia-geral",
    "title": "Tratamento de Exceções",
    "section": "Ideia Geral",
    "text": "Ideia Geral\n\nA cláusula try contém um bloco de código que pode levantar exceções. Ela tenta executar o bloco de comando nela contido\nSe uma exceção for levantada dentro do try, o fluxo do programa é redirecionado para a cláusula except\n\ntry:\n    # Tenta executar o bloco\nexcept: \n    #tratamento"
  },
  {
    "objectID": "slides/14-excecoes/14-excecoes.html#exceções",
    "href": "slides/14-excecoes/14-excecoes.html#exceções",
    "title": "Tratamento de Exceções",
    "section": "Exceções",
    "text": "Exceções\nMais detalhes sobre exceções no Notebook\n\n\n\nECT2504 - Programação Orientada a Objetos"
  }
]