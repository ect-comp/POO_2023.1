---
title: "Herança"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Objetivo

Apresentar o mecanismo de herança:

- O que é herança em POO
- Como utilizá-la na linguagem Python

---

## Os Quatro Pilares de POO

- Abstração
- Encapsulamento
- **Herança**: permite a reutilização de comportamento entre classes
- Polimorfismo
---

## Herança

- Capacidade de uma classe herdar o comportamento definido por outra classe
- Possibilita a reutilização de código entre classes que apresentam alguma
  similaridade entre si

---

## Herança

- Um novo tipo de relação entre classes
- Acontece entre objetos _genéricos_ e objetos _específicos_ 

---

## UML: Herança {.nostretch}

![](img/heranca.png){width=60% fig-align="center"}

- Relação do tipo "_é um_": "um objeto B __é um__ objeto A"
- Classe B __herda__ o comportamento (atributos e métodos) da classe A
- A: classe base, classe mãe ou _superclasse_
- B: classe derivada, classe filha ou _subclasse_

---

## Herança

- As superclasses devem oferecer comportamentos genéricos
- As subclasses devem oferecer comportamentos específicos

---

## Exemplos

Relações de herança entre classes:

- `Pessoa` e `Aluno`: todo aluno (objeto específico) é uma pessoa
  (objeto genérico)
- `MeioDeTransporte` e `Carro`: todo carro (objeto específico) é um meio de transporte
  (objeto genérico)
- `Sensor` e `Sonar`: todo sonar (objeto específico) é um sensor
  (objeto genérico)
- `Poligono` e `Triangulo`: todo triângulo (objeto específico) é um polígono
  (objeto genérico)
---

## Mais um exemplo {.nostretch}

Diagrama de classe envolvendo heranças:

![](img/transportes.png){width=60% fig-align="center"}

---

## Onde Herança pode ser útil?

- As relações de herança definem uma __hierarquia de classes__ onde as subclasses
herdam as características das suas superclasses
- É útil para definir um comportamento em comum para objetos de uma mesma hierarquia
  - O código da classe base é reutilizado em todas as subclasses
  - Qualquer alteração no código da classe base é propagado para todas as subclasses
---

## Onde Herança pode ser útil?

- O comportamento __comum__ a várias classes pode ser definido em uma superclasse
- Além de reutilizar código, as subclasses também podem:
  - Reescrever completamente os métodos que ditam o comportamento da classe
    (*method overriding*)
  - Estender os métodos que ditam o comportamento da classe
    (utilizando parte da implementação base)
---

## Como Funciona na Prática

[08-heranca](08-Heranca.ipynb)